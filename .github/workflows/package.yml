# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Package App

on:
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish this release"
        required: true
        default: false
        type: boolean

permissions: write-all

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller chinesecalendar APScheduler Pillow pywin10 pywin32 requests sqlitedict
    - name: Download And Extract UPX
      run: |
        Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.0.2/upx-4.0.2-win64.zip" -OutFile .\UPX.zip
        Expand-Archive .\UPX.zip -DestinationPath .
        ren .\upx-4.0.2-win64 UPX
    - name: Package App
      run: |
        mkdir cache
        cd cache
        mkdir hooks
        copy ..\other\hook-apscheduler.py hooks
        pyinstaller --upx-dir "..\UPX" -F -i "..\icons\favicon.ico" "..\CountBoard.py" -w --additional-hooks-dir=./hooks
        copy dist\CountBoard.exe ..
        cd ..
        rmdir cache -Recurse -Force
    - name: Get Version
      id: versionGet
      run: |
        $versionString = Select-String -Path .\CountBoard.py "\d+(\.\d){2}"
        $versionString -match "\d+(\.\d){2}"
        $version = $matches[0]
        echo "name=CountBoard-V$version" >> $env:GITHUB_OUTPUT
        echo "version=$version" >> $env:GITHUB_OUTPUT
    - name: Upload Main Program
      uses: actions/upload-artifact@v3.1.2
      with:
        name: ${{ steps.versionGet.outputs.name }}
        path: |
          icons
          CountBoard.exe
    - name: Upload APP-Update
      uses: actions/upload-artifact@v3.1.2
      with:
        name: app-update
        path: CountBoard.exe
    - name: Create ZIP Archive
      if: ${{ inputs.publish }}
      run: |
        Compress-Archive -Path "CountBoard.exe","icons" -DestinationPath "main.zip" -Force
        Compress-Archive -Path "CountBoard.exe" -DestinationPath "app-update.zip" -Force
    - name: Create Draft Release
      id: create_release
      if: ${{ inputs.publish }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versionGet.outputs.version }}
        release_name: ${{ steps.versionGet.outputs.version }}
        body_path: versionText.md
        draft: false
        prerelease: false
    - name: Release Main Program
      id: upload-release-main
      if: ${{ inputs.publish }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: main.zip
        asset_name: ${{ steps.versionGet.outputs.name }}.zip
        asset_content_type: application/zip
    - name: Release App Update
      id: upload-release-update
      if: ${{ inputs.publish }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app-update.zip
        asset_name: app-update.zip
        asset_content_type: application/zip